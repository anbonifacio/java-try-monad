<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="org.anbonifacio.try_monad.TryTest" time="0.297" tests="71" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="20"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/antoniobonifacio/workspace/java-try-monad/try-monad/target/test-classes:/Users/antoniobonifacio/workspace/java-try-monad/try-monad/target/classes:/Users/antoniobonifacio/.m2/repository/org/junit/jupiter/junit-jupiter/5.9.3/junit-jupiter-5.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.3/junit-jupiter-api-5.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/antoniobonifacio/.m2/repository/org/junit/platform/junit-platform-commons/1.9.3/junit-platform-commons-1.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/antoniobonifacio/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.9.3/junit-jupiter-params-5.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.3/junit-jupiter-engine-5.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/junit/platform/junit-platform-engine/1.9.3/junit-platform-engine-1.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/antoniobonifacio/.m2/repository/net/bytebuddy/byte-buddy/1.12.21/byte-buddy-1.12.21.jar:"/>
    <property name="java.vm.vendor" value="Eclipse Adoptium"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://adoptium.net/"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="20"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="IT"/>
    <property name="sun.boot.library.path" value="/Users/antoniobonifacio/.sdkman/candidates/java/20.0.2-tem/lib"/>
    <property name="sun.java.command" value="/Users/antoniobonifacio/workspace/java-try-monad/try-monad/target/surefire/surefirebooter-20231005002113005_3.jar /Users/antoniobonifacio/workspace/java-try-monad/try-monad/target/surefire 2023-10-05T00-21-12_937-jvmRun1 surefire-20231005002113005_1tmp surefire_0-20231005002113005_2tmp"/>
    <property name="http.nonProxyHosts" value="dns.google|*.dns.google|one.one.one.one|*.one.one.one.one"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/antoniobonifacio/workspace/java-try-monad/try-monad/target/test-classes:/Users/antoniobonifacio/workspace/java-try-monad/try-monad/target/classes:/Users/antoniobonifacio/.m2/repository/org/junit/jupiter/junit-jupiter/5.9.3/junit-jupiter-5.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.3/junit-jupiter-api-5.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/antoniobonifacio/.m2/repository/org/junit/platform/junit-platform-commons/1.9.3/junit-platform-commons-1.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/antoniobonifacio/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.9.3/junit-jupiter-params-5.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.3/junit-jupiter-engine-5.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/junit/platform/junit-platform-engine/1.9.3/junit-platform-engine-1.9.3.jar:/Users/antoniobonifacio/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/antoniobonifacio/.m2/repository/net/bytebuddy/byte-buddy/1.12.21/byte-buddy-1.12.21.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/antoniobonifacio"/>
    <property name="user.language" value="it"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2023-07-18"/>
    <property name="java.home" value="/Users/antoniobonifacio/.sdkman/candidates/java/20.0.2-tem"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/antoniobonifacio/workspace/java-try-monad/try-monad"/>
    <property name="style.color" value="always"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/antoniobonifacio/workspace/java-try-monad/try-monad/target/surefire/surefirebooter-20231005002113005_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="dns.google|*.dns.google|one.one.one.one|*.one.one.one.one"/>
    <property name="java.runtime.version" value="20.0.2+9"/>
    <property name="user.name" value="antoniobonifacio"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="14.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Temurin-20.0.2+9"/>
    <property name="localRepository" value="/Users/antoniobonifacio/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/adoptium/adoptium-support/issues"/>
    <property name="java.io.tmpdir" value="/var/folders/9w/9r5xmzk556584jdjcr5pqwd40000gn/T/"/>
    <property name="java.version" value="20.0.2"/>
    <property name="user.dir" value="/Users/antoniobonifacio/workspace/java-try-monad/try-monad"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/antoniobonifacio/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Eclipse Adoptium"/>
    <property name="java.vm.version" value="20.0.2+9"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="dns.google|*.dns.google|one.one.one.one|*.one.one.one.one"/>
    <property name="java.class.version" value="64.0"/>
  </properties>
  <testcase name="differentSuccessShouldNotBeEqual" classname="org.anbonifacio.try_monad.TryTest" time="0.134"/>
  <testcase name="recoverWithOnFailureShouldReturnSuccessIfRecoverySucceeds" classname="org.anbonifacio.try_monad.TryTest" time="0.003"/>
  <testcase name="differentSuccessShouldHaveDifferentHash" classname="org.anbonifacio.try_monad.TryTest" time="0.002"/>
  <testcase name="shouldBeEmptyOnGetSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0.002"/>
  <testcase name="shouldThrowNullPointerExceptionWhenCallingTryOfNullSupplier" classname="org.anbonifacio.try_monad.TryTest" time="0.005"/>
  <testcase name="shouldCreateFailureWhenCallingTryOfSupplier" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="recoverOnFailureShouldReturnFailureIfRecoveryFails" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="flatMapOnSuccessShouldShouldReturnFailureIfApplyingTheMappingFunctionFails" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="OrElseOnOnFailureShouldReturnNewFailureIfTheGivenTryFails" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="sameFailureTypeWithDifferentExceptionObjectsShouldNotBeEqual" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="getOrElseOnFailureShouldReturnGivenValue" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="recoverOnFailureShouldReturnSuccessIfRecoverySucceeds" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="getOrElseOnFailureShouldReturnExpressionResult" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldThrowNullPointerExceptionWhenCallingTryOfCallable" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="filterOnFailureShouldJustReturnTheFailure" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="shouldReturnAlternativeOnOrElseSupplierIfFailure" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="shouldNotBeEmptyOnGetSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="sameSuccessShouldBeEqual" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="failureAndSuccessShouldNotBeEqual" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldReturnAlternateValueIfFailure" classname="org.anbonifacio.try_monad.TryTest" time="0.005"/>
  <testcase name="shouldReturnSelfOnOrElseIfSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="failureAndSuccessShouldNotHaveSameHash" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="shouldCreateSuccessWhenCallingTryRunCheckedRunnable" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="shouldReturnAlternativeOnOrElseIfFailure" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="sameFailureObjectShouldHaveSameHash" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldCreateSuccessWhenCallingTryOfSupplier" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="shouldCreateFailureWhenCallingTryRunCheckedRunnable" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldReturnStringForSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0.003"/>
  <testcase name="shouldCreateFailureWhenCallingTryOfCallable" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="isFailureOnFailureShouldBeTrue" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldExecuteAndFinallyOnSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="flatMapOnSuccessShouldReturnFailureIfTheMappingFunctionFails" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="mapOnSuccessShouldReturnSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldReturnFailedStageOnFailure" classname="org.anbonifacio.try_monad.TryTest" time="0.006"/>
  <testcase name="sameFailureTypeWithDifferentExceptionObjectsShouldHaveDifferentHash" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="getOrElseOnOnSuccessShouldReturnExpressionResult" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="recoverWithOnSuccessShouldJustReturnSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="getOnSuccessShouldReturnTheExpressionResult" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="filterOnSuccessShouldReturnSuccessIfPredicateIsSatisfied" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="getFailureOnFailureShouldReturnOptionalOfException" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="shouldThrowIfFatalError(Error)[1]" classname="org.anbonifacio.try_monad.TryTest" time="0.019"/>
  <testcase name="shouldThrowIfFatalError(Error)[2]" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldThrowIfFatalError(Error)[3]" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="shouldThrowIfFatalError(Error)[4]" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldReturnStringForFailure" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="sameFailureObjectShouldBeEqual" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="isSuccessOnSuccessShouldBeTrue" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="recoverWithOnFailureShouldReturnFailureIfRecoveryFails" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="shouldExecuteAndFinallyOnFailure" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="recoverOnSuccessShouldShouldJustReturnSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldExecuteAndFinallyTryOnFailureWithFailure" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="getCauseOnSuccessShouldReturnNoSuchElementException" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldThrowNewExceptionWhenOrElseThrowOnFailure" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="mapOnSuccessShouldReturnSuccessForSubTypes" classname="org.anbonifacio.try_monad.TryTest" time="0.006"/>
  <testcase name="shouldReturnValueIfSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="mapOnSuccessShouldReturnAFailureIfTheMappingFunctionFails" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="mapOnFailureShouldJustReturnTheFailure" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="getFailureOnSuccessShouldReturnEmptyOptional" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldCreateSuccessWhenCallingTryOfCallable" classname="org.anbonifacio.try_monad.TryTest" time="0.002"/>
  <testcase name="OrElseOnOnFailureShouldReturnExpressionResultOfTheGivenTry" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="differentFailuresShouldNotBeEqual" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="toOptionalOnSuccessShouldHaveNonEmptyValue" classname="org.anbonifacio.try_monad.TryTest" time="0.002"/>
  <testcase name="shouldReturnSelfOnOrElseSupplierIfSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="shouldThrowNullPointerExceptionWhenCallingTryRunCheckedRunnable" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="shouldReturnCompletedStageOnSuccess" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="filterOnSuccessShouldReturnFailureIfPredicateIsNotSatisfied" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="OrElseOnOnSuccessShouldReturnExpressionResult" classname="org.anbonifacio.try_monad.TryTest" time="0"/>
  <testcase name="getOnFailureShouldThrowRuntimeException" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="flatMapOnSuccessShouldApplyTheGivenFunctionThatSucceeds" classname="org.anbonifacio.try_monad.TryTest" time="0.002"/>
  <testcase name="toOptionalOnFailureShouldReturnEmpty" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
  <testcase name="flatMapOnFailureShouldJustReturnTheFailure" classname="org.anbonifacio.try_monad.TryTest" time="0.001"/>
</testsuite>